"use client";

import { useState } from "react";
import {
  Upload,
  FileText,
  Database,
  Code,
  MessageSquare,
  Download,
  Copy,
  Send,
  X,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";
import papa from "papaparse";
interface CSVInfo {
  filename: string;
  columns: Array<{
    name: string;
    type: string;
    nulls: number;
  }>;
  rows: number;
  suggestedTarget: string;
}

interface CodeSection {
  title: string;
  description: string;
  code: string;
}

interface ChatMessage {
  id: string;
  type: "user" | "assistant";
  content: string;
  timestamp: Date;
}

export default function MLDashboard() {
  const handleSubmit = () => {
    if (file) {
      handleFileUpload(file);
    }
  };
  const [file, setFile] = useState<File | null>(null);
  const [csvInfo, setCsvInfo] = useState<CSVInfo | null>(null);
  const [codeSections, setCodeSections] = useState<CodeSection[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);
  const [chatInput, setChatInput] = useState("");
  const [isChatOpen, setIsChatOpen] = useState(false);

  const handleFileUpload = (uploadedFile: File) => {
  // ✅ Validate the uploaded file first
  if (!uploadedFile || !(uploadedFile instanceof File)) {
    console.error("❌ Invalid file input.")
    return
  }

  setFile(uploadedFile)

  papa.parse(uploadedFile, {
    header: true,
    skipEmptyLines: true,
    complete: async (results) => {
      const parsedRows = results.data
      console.log("✅ Parsed rows from CSV:", parsedRows)

      if (!Array.isArray(parsedRows) || parsedRows.length === 0 || Object.keys(parsedRows[0]).length === 0) {
        console.error("❌ CSV parsing failed — empty or invalid format.")
        alert("Failed to parse CSV. Please check the file format.")
        return
      }

      try {
        const res = await fetch("/api/analyze-dataset", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ rows: parsedRows }),
        })

        if (!res.ok) {
          throw new Error("API error: " + res.status)
        }

        const summary = await res.json()
        console.log("✅ Dataset summary from backend:", summary)

        setCsvInfo({
          filename: uploadedFile.name,
          columns: summary.columns.map((col: any) => ({
            name: col.name,
            type: col.type,
            nulls: col.missing_percentage,
          })),
          rows: summary.num_rows,
          suggestedTarget: summary.suggested_target,
        })

        // Send summary to Gemini via /api/generate-code
        try {
          const codeRes = await fetch("/api/generate-code", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ datasetSummary: summary }),
          });
          if (!codeRes.ok) {
            throw new Error("Gemini API error: " + codeRes.status);
          }
          const codeData = await codeRes.json();
          setCodeSections([
            {
              title: "ML Pipeline",
              description: "Generated by Gemini based on your dataset.",
              code: codeData.code || "No code returned.",
            },
          ]);
        } catch (err) {
          console.error("❌ Error getting code from Gemini:", err);
          alert("There was a problem generating code from Gemini.");
        }
      } catch (err) {
        console.error("❌ Error analyzing dataset:", err)
        alert("There was a problem analyzing the CSV.")
      }
    },
    error: (err) => {
      console.error("❌ PapaParse error:", err)
      alert("CSV parsing failed.")
    },
  })
}

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  const downloadFullPipeline = () => {
    const fullCode = codeSections
      .map(
        (section) =>
          `# ${section.title}\n# ${section.description}\n\n${section.code}\n\n`
      )
      .join("");

    const blob = new Blob([fullCode], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "ml_pipeline.py";
    a.click();
    URL.revokeObjectURL(url);
  };

  const sendChatMessage = () => {
    if (!chatInput.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "user",
      content: chatInput,
      timestamp: new Date(),
    };

    setChatMessages((prev) => [...prev, userMessage]);
    setChatInput("");

    // Simulate AI response
    setTimeout(() => {
      const assistantMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: "assistant",
        content: `I'll help you ${chatInput.toLowerCase()}. Here's the updated code section that addresses your request.`,
        timestamp: new Date(),
      };
      setChatMessages((prev) => [...prev, assistantMessage]);
    }, 1000);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="border-b bg-white">
        <div className="container mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="h-8 w-8 rounded-lg bg-blue-600 flex items-center justify-center">
                <Code className="h-5 w-5 text-white" />
              </div>
              <h1 className="text-xl font-semibold text-gray-900">
                ML Code Generator
              </h1>
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsChatOpen(true)}
              className="flex items-center space-x-2"
            >
              <MessageSquare className="h-4 w-4" />
              <span>Chat Assistant</span>
            </Button>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content */}
          <div className="lg:col-span-3 space-y-8">
            {/* File Upload Section */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Upload className="h-5 w-5" />
                  <span>Upload Dataset</span>
                </CardTitle>
                <CardDescription>
                  Upload your CSV file to generate tailored Python code for
                  machine learning
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div
                  className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors cursor-pointer"
                  onDrop={(e) => {
                    e.preventDefault();
                    const droppedFile = e.dataTransfer.files[0];
                    if (droppedFile && droppedFile.type === "text/csv") {
                      handleFileUpload(droppedFile);
                    }
                  }}
                  onDragOver={(e) => e.preventDefault()}
                >
                  {file ? (
                    <div className="space-y-2">
                      <FileText className="h-12 w-12 text-green-500 mx-auto" />
                      <p className="text-sm font-medium text-gray-900">
                        {file.name}
                      </p>
                      <p className="text-xs text-gray-500">
                        {(file.size / 1024 / 1024).toFixed(2)} MB
                      </p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <Upload className="h-12 w-12 text-gray-400 mx-auto" />
                      <div>
                        <p className="text-sm font-medium text-gray-900">
                          Drop your CSV file here, or{" "}
                          <label className="text-blue-600 hover:text-blue-500 cursor-pointer">
                            browse
                            <input
                              type="file"
                              accept=".csv"
                              className="hidden"
                              onChange={(e) => {
                                const selectedFile = e.target.files?.[0];
                                if (selectedFile)
                                  handleFileUpload(selectedFile);
                              }}
                            />
                          </label>
                        </p>
                        <p className="text-xs text-gray-500 mt-1">
                          CSV files up to 10MB
                        </p>
                      </div>
                    </div>
                  )}
                </div>

                {file && (
                  <div className="mt-4 flex justify-end">
                    <Button onClick={handleSubmit} disabled={isProcessing}>
                      {isProcessing ? "Processing..." : "Generate Code"}
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* CSV Info Panel */}
            {csvInfo && (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Database className="h-5 w-5" />
                    <span>Dataset Overview</span>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-medium text-gray-900 mb-3">
                        Basic Info
                      </h4>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Filename:</span>
                          <span className="font-mono">{csvInfo.filename}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Rows:</span>
                          <span className="font-mono">
                            {csvInfo.rows.toLocaleString()}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Columns:</span>
                          <span className="font-mono">
                            {csvInfo.columns.length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">
                            Suggested Target:
                          </span>
                          <Badge variant="secondary">
                            {csvInfo.suggestedTarget}
                          </Badge>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-medium text-gray-900 mb-3">
                        Columns
                      </h4>
                      <div className="space-y-2">
                        {csvInfo.columns.map((col, index) => (
                          <div
                            key={index}
                            className="flex items-center justify-between text-sm"
                          >
                            <span className="font-mono text-gray-900">
                              {col.name}
                            </span>
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline" className="text-xs">
                                {col.type}
                              </Badge>
                              {col.nulls > 0 && (
                                <Badge
                                  variant="destructive"
                                  className="text-xs"
                                >
                                  {col.nulls} nulls
                                </Badge>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Generated Code Sections */}
            {codeSections.length > 0 && (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-lg font-semibold text-gray-900">
                    Generated Code
                  </h2>
                  <Button
                    onClick={downloadFullPipeline}
                    className="flex items-center space-x-2"
                  >
                    <Download className="h-4 w-4" />
                    <span>Download Full Pipeline</span>
                  </Button>
                </div>

                {codeSections.map((section, index) => (
                  <Card key={index}>
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle className="text-base">
                            {section.title}
                          </CardTitle>
                          <CardDescription>
                            {section.description}
                          </CardDescription>
                        </div>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => copyToClipboard(section.code)}
                          className="flex items-center space-x-1"
                        >
                          <Copy className="h-3 w-3" />
                          <span>Copy</span>
                        </Button>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <pre className="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto text-sm">
                        <code>{section.code}</code>
                      </pre>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Chat Modal */}
      {isChatOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md h-96 flex flex-col">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-base">Chat Assistant</CardTitle>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsChatOpen(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </CardHeader>
            <CardContent className="flex-1 flex flex-col p-0">
              <ScrollArea className="flex-1 p-4">
                <div className="space-y-4">
                  {chatMessages.length === 0 ? (
                    <div className="text-center text-gray-500 text-sm py-8">
                      Ask me to modify the generated code!
                      <br />
                      Try: "Change model to SVM" or "Add accuracy score"
                    </div>
                  ) : (
                    chatMessages.map((message) => (
                      <div
                        key={message.id}
                        className={`flex ${
                          message.type === "user"
                            ? "justify-end"
                            : "justify-start"
                        }`}
                      >
                        <div
                          className={`max-w-[80%] rounded-lg px-3 py-2 text-sm ${
                            message.type === "user"
                              ? "bg-blue-600 text-white"
                              : "bg-gray-100 text-gray-900"
                          }`}
                        >
                          {message.content}
                        </div>
                      </div>
                    ))
                  )}
                </div>
              </ScrollArea>
              <Separator />
              <div className="p-4">
                <div className="flex space-x-2">
                  <Input
                    placeholder="Ask me to modify the code..."
                    value={chatInput}
                    onChange={(e) => setChatInput(e.target.value)}
                    onKeyPress={(e) => e.key === "Enter" && sendChatMessage()}
                    className="flex-1"
                  />
                  <Button size="sm" onClick={sendChatMessage}>
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
